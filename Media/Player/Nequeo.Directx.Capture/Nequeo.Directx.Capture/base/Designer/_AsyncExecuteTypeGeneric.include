// Warning 169 (Disables the 'Never used' warning)
#pragma warning disable 169
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=Namespace#>
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    
    #region <#=TypeName#> Extension Type
    /// <summary>
    /// The <#=TypeName#> object class.
    /// </summary>
    public partial class <#=TypeName#>
    {
        private Exception _exception<#=TypeName#> = null;
		private <#=TypeName#>Thread _thread<#=TypeName#>Context = null;

		/// <summary>
        /// Gets the current async exception; else null;
        /// </summary>
        public Exception Exception<#=TypeName#>
        {
            get { return _exception<#=TypeName#>; }
        }

		/// <summary>
        /// Gets the <#=TypeName#> threading context.
        /// </summary>
        public <#=TypeName#>Thread <#=TypeName#>ThreadContext
        {
            get { return _thread<#=TypeName#>Context; }
        }

		/// <summary>
        /// On create.
        /// </summary>
        partial void OnCreated();

		/// <summary>
        /// On create instance of <#=TypeName#>
        /// </summary>
		partial void OnCreated()
		{
			// Start the async control.
			_thread<#=TypeName#>Context = new <#=TypeName#>Thread(this);
			_thread<#=TypeName#>Context.AsyncError += new Nequeo.Threading.EventHandler<Exception>(_asyncAccount_AsyncError);
		}

		/// <summary>
        /// Async error
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e1"></param>
        private void _asyncAccount_AsyncError(object sender, Exception e1)
        {
            _exception<#=TypeName#> = e1;
        }

		/// <summary>
        /// <#=TypeName#> threading handler.
        /// </summary>
        public class <#=TypeName#>Thread : Nequeo.Threading.AsyncExecutionHandler<<#=TypeName#>>
        {
            /// <summary>
            /// <#=TypeName#> threading handler.
            /// </summary>
            /// <param name="service">The <#=TypeName#> type.</param>
            public <#=TypeName#>Thread(<#=TypeName#> service)
                : base(service) { }
        }
    }
    #endregion
}

#pragma warning restore 169
